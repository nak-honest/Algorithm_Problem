# 걸린 시간 : 30분
# 제출 횟수 : 2번
# 풀이 참조 : x
# 반례 참조 : x
'''
L1의 각 끝점을 a, b라 하고 L2의 각 끝점을 c, d라 하면
L1과 L2가 교차하기 위해서는 다음의 조건을 만족해야 한다.

1. a -> b -> c 로 가는 방향과 a -> b -> d 로 가는 방향이 반대여야 한다. 즉 하나가 시계방향이면, 나머지는 반시계 방향이어야 한다.
2. c -> d -> a 로 가는 방향과 c -> d -> b 로 가는 방향이 반대여야 한다.

여기서 두 조건을 모두 만족시켜야 하는 이유는 다음과 같다.
L1을 무한히 늘린다면 L2와 교차하지만, 현재는 교차하지 않는 경우 a -> b -> c 로 가는 방향과 a -> b -> d 로 가는 방향이 같다.
-> 직접 그려보면 왜인지 알 수 있다. 무한히 긴 직선에서는 그 직선 위 아래로 점 c, d 가 존재하지만 현재의 길이로는 닿지 않는 경우이기 때문이다.
따라서 반대로 c -> d -> a 의 방향과 c -> d -> b의 방향도 체크해야 한다.
'''
def ccw(a, b, c):
    return a[0] * b[1] + b[0] * c[1] + c[0] * a[1] - (a[1] * b[0] + b[1] * c[0] + c[1] * a[0])

x1, y1, x2, y2 = map(int, input().split())
x3, y3, x4, y4 = map(int, input().split())

a = (x1, y1)
b = (x2, y2)
c = (x3, y3)
d = (x4, y4)

if ccw(a, b, c) * ccw(a, b, d) < 0 and ccw(c, d, a) * ccw(c, d, b) < 0:
    print(1)
else:
    print(0)